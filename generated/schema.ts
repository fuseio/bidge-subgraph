// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Mapping extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Mapping entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Mapping entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Mapping", id.toString(), this);
  }

  static load(id: string): Mapping | null {
    return store.get("Mapping", id) as Mapping | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): Bytes {
    let value = this.get("key");
    return value.toBytes();
  }

  set key(value: Bytes) {
    this.set("key", Value.fromBytes(value));
  }

  get foreignToken(): Bytes {
    let value = this.get("foreignToken");
    return value.toBytes();
  }

  set foreignToken(value: Bytes) {
    this.set("foreignToken", Value.fromBytes(value));
  }

  get homeToken(): Bytes {
    let value = this.get("homeToken");
    return value.toBytes();
  }

  set homeToken(value: Bytes) {
    this.set("homeToken", Value.fromBytes(value));
  }

  get foreignBridge(): Bytes {
    let value = this.get("foreignBridge");
    return value.toBytes();
  }

  set foreignBridge(value: Bytes) {
    this.set("foreignBridge", Value.fromBytes(value));
  }

  get homeBridge(): Bytes {
    let value = this.get("homeBridge");
    return value.toBytes();
  }

  set homeBridge(value: Bytes) {
    this.set("homeBridge", Value.fromBytes(value));
  }

  get foreignStartBlock(): BigInt | null {
    let value = this.get("foreignStartBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set foreignStartBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("foreignStartBlock");
    } else {
      this.set("foreignStartBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get homeStartBlock(): BigInt | null {
    let value = this.get("homeStartBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set homeStartBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("homeStartBlock");
    } else {
      this.set("homeStartBlock", Value.fromBigInt(value as BigInt));
    }
  }
}
