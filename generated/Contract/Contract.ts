// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class BridgeMappingUpdated extends EthereumEvent {
  get params(): BridgeMappingUpdated__Params {
    return new BridgeMappingUpdated__Params(this);
  }
}

export class BridgeMappingUpdated__Params {
  _event: BridgeMappingUpdated;

  constructor(event: BridgeMappingUpdated) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get foreignToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get homeToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get foreignBridge(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get homeBridge(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get foreignStartBlock(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get homeStartBlock(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class EternalOwnershipTransferred extends EthereumEvent {
  get params(): EternalOwnershipTransferred__Params {
    return new EternalOwnershipTransferred__Params(this);
  }
}

export class EternalOwnershipTransferred__Params {
  _event: EternalOwnershipTransferred;

  constructor(event: EternalOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract__getBridgeMapperVersionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getBridgeMapperVersion(): Contract__getBridgeMapperVersionResult {
    let result = super.call("getBridgeMapperVersion", []);

    return new Contract__getBridgeMapperVersionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getBridgeMapperVersion(): CallResult<
    Contract__getBridgeMapperVersionResult
  > {
    let result = super.tryCall("getBridgeMapperVersion", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__getBridgeMapperVersionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  foreignStartBlockByKey(_key: Bytes): BigInt {
    let result = super.call("foreignStartBlockByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);

    return result[0].toBigInt();
  }

  try_foreignStartBlockByKey(_key: Bytes): CallResult<BigInt> {
    let result = super.tryCall("foreignStartBlockByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getAddBridgeMappingHash(
    _key: Bytes,
    _foreignToken: Address,
    _homeToken: Address,
    _foreignBridge: Address,
    _homeBridge: Address,
    _foreignStartBlock: BigInt,
    _homeStartBlock: BigInt
  ): Bytes {
    let result = super.call("getAddBridgeMappingHash", [
      EthereumValue.fromFixedBytes(_key),
      EthereumValue.fromAddress(_foreignToken),
      EthereumValue.fromAddress(_homeToken),
      EthereumValue.fromAddress(_foreignBridge),
      EthereumValue.fromAddress(_homeBridge),
      EthereumValue.fromUnsignedBigInt(_foreignStartBlock),
      EthereumValue.fromUnsignedBigInt(_homeStartBlock)
    ]);

    return result[0].toBytes();
  }

  try_getAddBridgeMappingHash(
    _key: Bytes,
    _foreignToken: Address,
    _homeToken: Address,
    _foreignBridge: Address,
    _homeBridge: Address,
    _foreignStartBlock: BigInt,
    _homeStartBlock: BigInt
  ): CallResult<Bytes> {
    let result = super.tryCall("getAddBridgeMappingHash", [
      EthereumValue.fromFixedBytes(_key),
      EthereumValue.fromAddress(_foreignToken),
      EthereumValue.fromAddress(_homeToken),
      EthereumValue.fromAddress(_foreignBridge),
      EthereumValue.fromAddress(_homeBridge),
      EthereumValue.fromUnsignedBigInt(_foreignStartBlock),
      EthereumValue.fromUnsignedBigInt(_homeStartBlock)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): CallResult<boolean> {
    let result = super.tryCall("isInitialized", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  foreignBridgeByKey(_key: Bytes): Address {
    let result = super.call("foreignBridgeByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);

    return result[0].toAddress();
  }

  try_foreignBridgeByKey(_key: Bytes): CallResult<Address> {
    let result = super.tryCall("foreignBridgeByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  foreignTokenByKey(_key: Bytes): Address {
    let result = super.call("foreignTokenByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);

    return result[0].toAddress();
  }

  try_foreignTokenByKey(_key: Bytes): CallResult<Address> {
    let result = super.tryCall("foreignTokenByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  hashedTxs(_hashTx: Bytes): boolean {
    let result = super.call("hashedTxs", [
      EthereumValue.fromFixedBytes(_hashTx)
    ]);

    return result[0].toBoolean();
  }

  try_hashedTxs(_hashTx: Bytes): CallResult<boolean> {
    let result = super.tryCall("hashedTxs", [
      EthereumValue.fromFixedBytes(_hashTx)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  homeBridgeByKey(_key: Bytes): Address {
    let result = super.call("homeBridgeByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);

    return result[0].toAddress();
  }

  try_homeBridgeByKey(_key: Bytes): CallResult<Address> {
    let result = super.tryCall("homeBridgeByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  initialize(_owner: Address): boolean {
    let result = super.call("initialize", [EthereumValue.fromAddress(_owner)]);

    return result[0].toBoolean();
  }

  try_initialize(_owner: Address): CallResult<boolean> {
    let result = super.tryCall("initialize", [
      EthereumValue.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  homeStartBlockByKey(_key: Bytes): BigInt {
    let result = super.call("homeStartBlockByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);

    return result[0].toBigInt();
  }

  try_homeStartBlockByKey(_key: Bytes): CallResult<BigInt> {
    let result = super.tryCall("homeStartBlockByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  homeTokenByKey(_key: Bytes): Address {
    let result = super.call("homeTokenByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);

    return result[0].toAddress();
  }

  try_homeTokenByKey(_key: Bytes): CallResult<Address> {
    let result = super.tryCall("homeTokenByKey", [
      EthereumValue.fromFixedBytes(_key)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class RemoveBridgeMappingCall extends EthereumCall {
  get inputs(): RemoveBridgeMappingCall__Inputs {
    return new RemoveBridgeMappingCall__Inputs(this);
  }

  get outputs(): RemoveBridgeMappingCall__Outputs {
    return new RemoveBridgeMappingCall__Outputs(this);
  }
}

export class RemoveBridgeMappingCall__Inputs {
  _call: RemoveBridgeMappingCall;

  constructor(call: RemoveBridgeMappingCall) {
    this._call = call;
  }

  get _key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveBridgeMappingCall__Outputs {
  _call: RemoveBridgeMappingCall;

  constructor(call: RemoveBridgeMappingCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddBridgeMappingCall extends EthereumCall {
  get inputs(): AddBridgeMappingCall__Inputs {
    return new AddBridgeMappingCall__Inputs(this);
  }

  get outputs(): AddBridgeMappingCall__Outputs {
    return new AddBridgeMappingCall__Outputs(this);
  }
}

export class AddBridgeMappingCall__Inputs {
  _call: AddBridgeMappingCall;

  constructor(call: AddBridgeMappingCall) {
    this._call = call;
  }

  get _key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _foreignToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _homeToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _foreignBridge(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _homeBridge(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _foreignStartBlock(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _homeStartBlock(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class AddBridgeMappingCall__Outputs {
  _call: AddBridgeMappingCall;

  constructor(call: AddBridgeMappingCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
