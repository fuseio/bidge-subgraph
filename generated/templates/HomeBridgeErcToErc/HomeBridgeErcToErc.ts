// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class AmountLimitExceeded extends EthereumEvent {
  get params(): AmountLimitExceeded__Params {
    return new AmountLimitExceeded__Params(this);
  }
}

export class AmountLimitExceeded__Params {
  _event: AmountLimitExceeded;

  constructor(event: AmountLimitExceeded) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get transactionHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class UserRequestForSignature extends EthereumEvent {
  get params(): UserRequestForSignature__Params {
    return new UserRequestForSignature__Params(this);
  }
}

export class UserRequestForSignature__Params {
  _event: UserRequestForSignature;

  constructor(event: UserRequestForSignature) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AffirmationCompleted extends EthereumEvent {
  get params(): AffirmationCompleted__Params {
    return new AffirmationCompleted__Params(this);
  }
}

export class AffirmationCompleted__Params {
  _event: AffirmationCompleted;

  constructor(event: AffirmationCompleted) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get transactionHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SignedForUserRequest extends EthereumEvent {
  get params(): SignedForUserRequest__Params {
    return new SignedForUserRequest__Params(this);
  }
}

export class SignedForUserRequest__Params {
  _event: SignedForUserRequest;

  constructor(event: SignedForUserRequest) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get messageHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class SignedForAffirmation extends EthereumEvent {
  get params(): SignedForAffirmation__Params {
    return new SignedForAffirmation__Params(this);
  }
}

export class SignedForAffirmation__Params {
  _event: SignedForAffirmation;

  constructor(event: SignedForAffirmation) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transactionHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class CollectedSignatures extends EthereumEvent {
  get params(): CollectedSignatures__Params {
    return new CollectedSignatures__Params(this);
  }
}

export class CollectedSignatures__Params {
  _event: CollectedSignatures;

  constructor(event: CollectedSignatures) {
    this._event = event;
  }

  get authorityResponsibleForRelay(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get messageHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get NumberOfCollectedSignatures(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GasPriceChanged extends EthereumEvent {
  get params(): GasPriceChanged__Params {
    return new GasPriceChanged__Params(this);
  }
}

export class GasPriceChanged__Params {
  _event: GasPriceChanged;

  constructor(event: GasPriceChanged) {
    this._event = event;
  }

  get gasPrice(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RequiredBlockConfirmationChanged extends EthereumEvent {
  get params(): RequiredBlockConfirmationChanged__Params {
    return new RequiredBlockConfirmationChanged__Params(this);
  }
}

export class RequiredBlockConfirmationChanged__Params {
  _event: RequiredBlockConfirmationChanged;

  constructor(event: RequiredBlockConfirmationChanged) {
    this._event = event;
  }

  get requiredBlockConfirmations(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DailyLimitChanged extends EthereumEvent {
  get params(): DailyLimitChanged__Params {
    return new DailyLimitChanged__Params(this);
  }
}

export class DailyLimitChanged__Params {
  _event: DailyLimitChanged;

  constructor(event: DailyLimitChanged) {
    this._event = event;
  }

  get newLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ExecutionDailyLimitChanged extends EthereumEvent {
  get params(): ExecutionDailyLimitChanged__Params {
    return new ExecutionDailyLimitChanged__Params(this);
  }
}

export class ExecutionDailyLimitChanged__Params {
  _event: ExecutionDailyLimitChanged;

  constructor(event: ExecutionDailyLimitChanged) {
    this._event = event;
  }

  get newLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EternalOwnershipTransferred extends EthereumEvent {
  get params(): EternalOwnershipTransferred__Params {
    return new EternalOwnershipTransferred__Params(this);
  }
}

export class EternalOwnershipTransferred__Params {
  _event: EternalOwnershipTransferred;

  constructor(event: EternalOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class HomeBridgeErcToErc__getBridgeInterfacesVersionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class HomeBridgeErcToErc extends SmartContract {
  static bind(address: Address): HomeBridgeErcToErc {
    return new HomeBridgeErcToErc("HomeBridgeErcToErc", address);
  }

  numMessagesSigned(_message: Bytes): BigInt {
    let result = super.call("numMessagesSigned", [
      EthereumValue.fromFixedBytes(_message)
    ]);

    return result[0].toBigInt();
  }

  try_numMessagesSigned(_message: Bytes): CallResult<BigInt> {
    let result = super.tryCall("numMessagesSigned", [
      EthereumValue.fromFixedBytes(_message)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  signature(_hash: Bytes, _index: BigInt): Bytes {
    let result = super.call("signature", [
      EthereumValue.fromFixedBytes(_hash),
      EthereumValue.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBytes();
  }

  try_signature(_hash: Bytes, _index: BigInt): CallResult<Bytes> {
    let result = super.tryCall("signature", [
      EthereumValue.fromFixedBytes(_hash),
      EthereumValue.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  erc677token(): Address {
    let result = super.call("erc677token", []);

    return result[0].toAddress();
  }

  try_erc677token(): CallResult<Address> {
    let result = super.tryCall("erc677token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  fixedAssets(_txHash: Bytes): boolean {
    let result = super.call("fixedAssets", [
      EthereumValue.fromFixedBytes(_txHash)
    ]);

    return result[0].toBoolean();
  }

  try_fixedAssets(_txHash: Bytes): CallResult<boolean> {
    let result = super.tryCall("fixedAssets", [
      EthereumValue.fromFixedBytes(_txHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  totalSpentPerDay(_day: BigInt): BigInt {
    let result = super.call("totalSpentPerDay", [
      EthereumValue.fromUnsignedBigInt(_day)
    ]);

    return result[0].toBigInt();
  }

  try_totalSpentPerDay(_day: BigInt): CallResult<BigInt> {
    let result = super.tryCall("totalSpentPerDay", [
      EthereumValue.fromUnsignedBigInt(_day)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): CallResult<boolean> {
    let result = super.tryCall("isInitialized", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentDay(): BigInt {
    let result = super.call("getCurrentDay", []);

    return result[0].toBigInt();
  }

  try_getCurrentDay(): CallResult<BigInt> {
    let result = super.tryCall("getCurrentDay", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  requiredBlockConfirmations(): BigInt {
    let result = super.call("requiredBlockConfirmations", []);

    return result[0].toBigInt();
  }

  try_requiredBlockConfirmations(): CallResult<BigInt> {
    let result = super.tryCall("requiredBlockConfirmations", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  requiredMessageLength(): BigInt {
    let result = super.call("requiredMessageLength", []);

    return result[0].toBigInt();
  }

  try_requiredMessageLength(): CallResult<BigInt> {
    let result = super.tryCall("requiredMessageLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  executionDailyLimit(): BigInt {
    let result = super.call("executionDailyLimit", []);

    return result[0].toBigInt();
  }

  try_executionDailyLimit(): CallResult<BigInt> {
    let result = super.tryCall("executionDailyLimit", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  message(_hash: Bytes): Bytes {
    let result = super.call("message", [EthereumValue.fromFixedBytes(_hash)]);

    return result[0].toBytes();
  }

  try_message(_hash: Bytes): CallResult<Bytes> {
    let result = super.tryCall("message", [
      EthereumValue.fromFixedBytes(_hash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  totalExecutedPerDay(_day: BigInt): BigInt {
    let result = super.call("totalExecutedPerDay", [
      EthereumValue.fromUnsignedBigInt(_day)
    ]);

    return result[0].toBigInt();
  }

  try_totalExecutedPerDay(_day: BigInt): CallResult<BigInt> {
    let result = super.tryCall("totalExecutedPerDay", [
      EthereumValue.fromUnsignedBigInt(_day)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  dailyLimit(): BigInt {
    let result = super.call("dailyLimit", []);

    return result[0].toBigInt();
  }

  try_dailyLimit(): CallResult<BigInt> {
    let result = super.tryCall("dailyLimit", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  numAffirmationsSigned(_withdrawal: Bytes): BigInt {
    let result = super.call("numAffirmationsSigned", [
      EthereumValue.fromFixedBytes(_withdrawal)
    ]);

    return result[0].toBigInt();
  }

  try_numAffirmationsSigned(_withdrawal: Bytes): CallResult<BigInt> {
    let result = super.tryCall("numAffirmationsSigned", [
      EthereumValue.fromFixedBytes(_withdrawal)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  affirmationsSigned(_withdrawal: Bytes): boolean {
    let result = super.call("affirmationsSigned", [
      EthereumValue.fromFixedBytes(_withdrawal)
    ]);

    return result[0].toBoolean();
  }

  try_affirmationsSigned(_withdrawal: Bytes): CallResult<boolean> {
    let result = super.tryCall("affirmationsSigned", [
      EthereumValue.fromFixedBytes(_withdrawal)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  withinExecutionLimit(_amount: BigInt): boolean {
    let result = super.call("withinExecutionLimit", [
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_withinExecutionLimit(_amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("withinExecutionLimit", [
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  executionMaxPerTx(): BigInt {
    let result = super.call("executionMaxPerTx", []);

    return result[0].toBigInt();
  }

  try_executionMaxPerTx(): CallResult<BigInt> {
    let result = super.tryCall("executionMaxPerTx", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  requiredSignatures(): BigInt {
    let result = super.call("requiredSignatures", []);

    return result[0].toBigInt();
  }

  try_requiredSignatures(): CallResult<BigInt> {
    let result = super.tryCall("requiredSignatures", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  messagesSigned(_message: Bytes): boolean {
    let result = super.call("messagesSigned", [
      EthereumValue.fromFixedBytes(_message)
    ]);

    return result[0].toBoolean();
  }

  try_messagesSigned(_message: Bytes): CallResult<boolean> {
    let result = super.tryCall("messagesSigned", [
      EthereumValue.fromFixedBytes(_message)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  validatorContract(): Address {
    let result = super.call("validatorContract", []);

    return result[0].toAddress();
  }

  try_validatorContract(): CallResult<Address> {
    let result = super.tryCall("validatorContract", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  deployedAtBlock(): BigInt {
    let result = super.call("deployedAtBlock", []);

    return result[0].toBigInt();
  }

  try_deployedAtBlock(): CallResult<BigInt> {
    let result = super.tryCall("deployedAtBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getBridgeInterfacesVersion(): HomeBridgeErcToErc__getBridgeInterfacesVersionResult {
    let result = super.call("getBridgeInterfacesVersion", []);

    return new HomeBridgeErcToErc__getBridgeInterfacesVersionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getBridgeInterfacesVersion(): CallResult<
    HomeBridgeErcToErc__getBridgeInterfacesVersionResult
  > {
    let result = super.tryCall("getBridgeInterfacesVersion", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new HomeBridgeErcToErc__getBridgeInterfacesVersionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  outOfLimitAmount(): BigInt {
    let result = super.call("outOfLimitAmount", []);

    return result[0].toBigInt();
  }

  try_outOfLimitAmount(): CallResult<BigInt> {
    let result = super.tryCall("outOfLimitAmount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  onTokenTransfer(_from: Address, _value: BigInt, param2: Bytes): boolean {
    let result = super.call("onTokenTransfer", [
      EthereumValue.fromAddress(_from),
      EthereumValue.fromUnsignedBigInt(_value),
      EthereumValue.fromBytes(param2)
    ]);

    return result[0].toBoolean();
  }

  try_onTokenTransfer(
    _from: Address,
    _value: BigInt,
    param2: Bytes
  ): CallResult<boolean> {
    let result = super.tryCall("onTokenTransfer", [
      EthereumValue.fromAddress(_from),
      EthereumValue.fromUnsignedBigInt(_value),
      EthereumValue.fromBytes(param2)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  upgradeabilityAdmin(): Address {
    let result = super.call("upgradeabilityAdmin", []);

    return result[0].toAddress();
  }

  try_upgradeabilityAdmin(): CallResult<Address> {
    let result = super.tryCall("upgradeabilityAdmin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  minPerTx(): BigInt {
    let result = super.call("minPerTx", []);

    return result[0].toBigInt();
  }

  try_minPerTx(): CallResult<BigInt> {
    let result = super.tryCall("minPerTx", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  withinLimit(_amount: BigInt): boolean {
    let result = super.call("withinLimit", [
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_withinLimit(_amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("withinLimit", [
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  maxPerTx(): BigInt {
    let result = super.call("maxPerTx", []);

    return result[0].toBigInt();
  }

  try_maxPerTx(): CallResult<BigInt> {
    let result = super.tryCall("maxPerTx", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  gasPrice(): BigInt {
    let result = super.call("gasPrice", []);

    return result[0].toBigInt();
  }

  try_gasPrice(): CallResult<BigInt> {
    let result = super.tryCall("gasPrice", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isAlreadyProcessed(_number: BigInt): boolean {
    let result = super.call("isAlreadyProcessed", [
      EthereumValue.fromUnsignedBigInt(_number)
    ]);

    return result[0].toBoolean();
  }

  try_isAlreadyProcessed(_number: BigInt): CallResult<boolean> {
    let result = super.tryCall("isAlreadyProcessed", [
      EthereumValue.fromUnsignedBigInt(_number)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  initialize(
    _validatorContract: Address,
    _dailyLimit: BigInt,
    _maxPerTx: BigInt,
    _minPerTx: BigInt,
    _homeGasPrice: BigInt,
    _requiredBlockConfirmations: BigInt,
    _erc677token: Address,
    _foreignDailyLimit: BigInt,
    _foreignMaxPerTx: BigInt,
    _owner: Address
  ): boolean {
    let result = super.call("initialize", [
      EthereumValue.fromAddress(_validatorContract),
      EthereumValue.fromUnsignedBigInt(_dailyLimit),
      EthereumValue.fromUnsignedBigInt(_maxPerTx),
      EthereumValue.fromUnsignedBigInt(_minPerTx),
      EthereumValue.fromUnsignedBigInt(_homeGasPrice),
      EthereumValue.fromUnsignedBigInt(_requiredBlockConfirmations),
      EthereumValue.fromAddress(_erc677token),
      EthereumValue.fromUnsignedBigInt(_foreignDailyLimit),
      EthereumValue.fromUnsignedBigInt(_foreignMaxPerTx),
      EthereumValue.fromAddress(_owner)
    ]);

    return result[0].toBoolean();
  }

  try_initialize(
    _validatorContract: Address,
    _dailyLimit: BigInt,
    _maxPerTx: BigInt,
    _minPerTx: BigInt,
    _homeGasPrice: BigInt,
    _requiredBlockConfirmations: BigInt,
    _erc677token: Address,
    _foreignDailyLimit: BigInt,
    _foreignMaxPerTx: BigInt,
    _owner: Address
  ): CallResult<boolean> {
    let result = super.tryCall("initialize", [
      EthereumValue.fromAddress(_validatorContract),
      EthereumValue.fromUnsignedBigInt(_dailyLimit),
      EthereumValue.fromUnsignedBigInt(_maxPerTx),
      EthereumValue.fromUnsignedBigInt(_minPerTx),
      EthereumValue.fromUnsignedBigInt(_homeGasPrice),
      EthereumValue.fromUnsignedBigInt(_requiredBlockConfirmations),
      EthereumValue.fromAddress(_erc677token),
      EthereumValue.fromUnsignedBigInt(_foreignDailyLimit),
      EthereumValue.fromUnsignedBigInt(_foreignMaxPerTx),
      EthereumValue.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getBridgeMode(): Bytes {
    let result = super.call("getBridgeMode", []);

    return result[0].toBytes();
  }

  try_getBridgeMode(): CallResult<Bytes> {
    let result = super.tryCall("getBridgeMode", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }
}

export class SetExecutionDailyLimitCall extends EthereumCall {
  get inputs(): SetExecutionDailyLimitCall__Inputs {
    return new SetExecutionDailyLimitCall__Inputs(this);
  }

  get outputs(): SetExecutionDailyLimitCall__Outputs {
    return new SetExecutionDailyLimitCall__Outputs(this);
  }
}

export class SetExecutionDailyLimitCall__Inputs {
  _call: SetExecutionDailyLimitCall;

  constructor(call: SetExecutionDailyLimitCall) {
    this._call = call;
  }

  get _dailyLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetExecutionDailyLimitCall__Outputs {
  _call: SetExecutionDailyLimitCall;

  constructor(call: SetExecutionDailyLimitCall) {
    this._call = call;
  }
}

export class SubmitSignatureCall extends EthereumCall {
  get inputs(): SubmitSignatureCall__Inputs {
    return new SubmitSignatureCall__Inputs(this);
  }

  get outputs(): SubmitSignatureCall__Outputs {
    return new SubmitSignatureCall__Outputs(this);
  }
}

export class SubmitSignatureCall__Inputs {
  _call: SubmitSignatureCall;

  constructor(call: SubmitSignatureCall) {
    this._call = call;
  }

  get signature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get message(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitSignatureCall__Outputs {
  _call: SubmitSignatureCall;

  constructor(call: SubmitSignatureCall) {
    this._call = call;
  }
}

export class FixAssetsAboveLimitsCall extends EthereumCall {
  get inputs(): FixAssetsAboveLimitsCall__Inputs {
    return new FixAssetsAboveLimitsCall__Inputs(this);
  }

  get outputs(): FixAssetsAboveLimitsCall__Outputs {
    return new FixAssetsAboveLimitsCall__Outputs(this);
  }
}

export class FixAssetsAboveLimitsCall__Inputs {
  _call: FixAssetsAboveLimitsCall;

  constructor(call: FixAssetsAboveLimitsCall) {
    this._call = call;
  }

  get txHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get unlockOnForeign(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class FixAssetsAboveLimitsCall__Outputs {
  _call: FixAssetsAboveLimitsCall;

  constructor(call: FixAssetsAboveLimitsCall) {
    this._call = call;
  }
}

export class ClaimTokensCall extends EthereumCall {
  get inputs(): ClaimTokensCall__Inputs {
    return new ClaimTokensCall__Inputs(this);
  }

  get outputs(): ClaimTokensCall__Outputs {
    return new ClaimTokensCall__Outputs(this);
  }
}

export class ClaimTokensCall__Inputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimTokensCall__Outputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class ExecuteAffirmationCall extends EthereumCall {
  get inputs(): ExecuteAffirmationCall__Inputs {
    return new ExecuteAffirmationCall__Inputs(this);
  }

  get outputs(): ExecuteAffirmationCall__Outputs {
    return new ExecuteAffirmationCall__Outputs(this);
  }
}

export class ExecuteAffirmationCall__Inputs {
  _call: ExecuteAffirmationCall;

  constructor(call: ExecuteAffirmationCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get transactionHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecuteAffirmationCall__Outputs {
  _call: ExecuteAffirmationCall;

  constructor(call: ExecuteAffirmationCall) {
    this._call = call;
  }
}

export class SetMinPerTxCall extends EthereumCall {
  get inputs(): SetMinPerTxCall__Inputs {
    return new SetMinPerTxCall__Inputs(this);
  }

  get outputs(): SetMinPerTxCall__Outputs {
    return new SetMinPerTxCall__Outputs(this);
  }
}

export class SetMinPerTxCall__Inputs {
  _call: SetMinPerTxCall;

  constructor(call: SetMinPerTxCall) {
    this._call = call;
  }

  get _minPerTx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinPerTxCall__Outputs {
  _call: SetMinPerTxCall;

  constructor(call: SetMinPerTxCall) {
    this._call = call;
  }
}

export class OnTokenTransferCall extends EthereumCall {
  get inputs(): OnTokenTransferCall__Inputs {
    return new OnTokenTransferCall__Inputs(this);
  }

  get outputs(): OnTokenTransferCall__Outputs {
    return new OnTokenTransferCall__Outputs(this);
  }
}

export class OnTokenTransferCall__Inputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class OnTokenTransferCall__Outputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetRequiredBlockConfirmationsCall extends EthereumCall {
  get inputs(): SetRequiredBlockConfirmationsCall__Inputs {
    return new SetRequiredBlockConfirmationsCall__Inputs(this);
  }

  get outputs(): SetRequiredBlockConfirmationsCall__Outputs {
    return new SetRequiredBlockConfirmationsCall__Outputs(this);
  }
}

export class SetRequiredBlockConfirmationsCall__Inputs {
  _call: SetRequiredBlockConfirmationsCall;

  constructor(call: SetRequiredBlockConfirmationsCall) {
    this._call = call;
  }

  get _blockConfirmations(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRequiredBlockConfirmationsCall__Outputs {
  _call: SetRequiredBlockConfirmationsCall;

  constructor(call: SetRequiredBlockConfirmationsCall) {
    this._call = call;
  }
}

export class SetDailyLimitCall extends EthereumCall {
  get inputs(): SetDailyLimitCall__Inputs {
    return new SetDailyLimitCall__Inputs(this);
  }

  get outputs(): SetDailyLimitCall__Outputs {
    return new SetDailyLimitCall__Outputs(this);
  }
}

export class SetDailyLimitCall__Inputs {
  _call: SetDailyLimitCall;

  constructor(call: SetDailyLimitCall) {
    this._call = call;
  }

  get _dailyLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDailyLimitCall__Outputs {
  _call: SetDailyLimitCall;

  constructor(call: SetDailyLimitCall) {
    this._call = call;
  }
}

export class SetGasPriceCall extends EthereumCall {
  get inputs(): SetGasPriceCall__Inputs {
    return new SetGasPriceCall__Inputs(this);
  }

  get outputs(): SetGasPriceCall__Outputs {
    return new SetGasPriceCall__Outputs(this);
  }
}

export class SetGasPriceCall__Inputs {
  _call: SetGasPriceCall;

  constructor(call: SetGasPriceCall) {
    this._call = call;
  }

  get _gasPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGasPriceCall__Outputs {
  _call: SetGasPriceCall;

  constructor(call: SetGasPriceCall) {
    this._call = call;
  }
}

export class SetMaxPerTxCall extends EthereumCall {
  get inputs(): SetMaxPerTxCall__Inputs {
    return new SetMaxPerTxCall__Inputs(this);
  }

  get outputs(): SetMaxPerTxCall__Outputs {
    return new SetMaxPerTxCall__Outputs(this);
  }
}

export class SetMaxPerTxCall__Inputs {
  _call: SetMaxPerTxCall;

  constructor(call: SetMaxPerTxCall) {
    this._call = call;
  }

  get _maxPerTx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxPerTxCall__Outputs {
  _call: SetMaxPerTxCall;

  constructor(call: SetMaxPerTxCall) {
    this._call = call;
  }
}

export class SetExecutionMaxPerTxCall extends EthereumCall {
  get inputs(): SetExecutionMaxPerTxCall__Inputs {
    return new SetExecutionMaxPerTxCall__Inputs(this);
  }

  get outputs(): SetExecutionMaxPerTxCall__Outputs {
    return new SetExecutionMaxPerTxCall__Outputs(this);
  }
}

export class SetExecutionMaxPerTxCall__Inputs {
  _call: SetExecutionMaxPerTxCall;

  constructor(call: SetExecutionMaxPerTxCall) {
    this._call = call;
  }

  get _maxPerTx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetExecutionMaxPerTxCall__Outputs {
  _call: SetExecutionMaxPerTxCall;

  constructor(call: SetExecutionMaxPerTxCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _validatorContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _dailyLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxPerTx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minPerTx(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _homeGasPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _requiredBlockConfirmations(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _erc677token(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _foreignDailyLimit(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _foreignMaxPerTx(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
